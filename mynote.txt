---2018.07.20---
	1.zookeeper集群有问题,使用单机192.168.4.133:2181后Conf.java跑通
	2.Conf.java需要看一下,尤其CountDownLatch对线程同步-- await()和countdown()
---2018.07.21---
	使用zookeepr开发分布式服务上下线感知(org.softcits.bigdata.zk01)
	DistributedServer演示服务上线后注册
	DistributedClient演示获取当前存活服务
	巧妙设计:
	1. 利用Zookeeper临时节点而不是永久节点,这样Zookeeper重启后节点信息不保存,服务启动后再重新注册
	2. 使用Zookeeper自增长id节点来避免服务注册冲突
	3. Zookeeper节点有两个属性,节点名(可以保存服务所在主机名)和节点数据(可以保存服务名)
	4. 利用Zookeeper的监听,通过重写Watcher的process方法来获取服务上下线时创建删除节点事件,从而重新获取Zookeeper节点注册的服务来动态感知服务。
		a.服务创建节点时->服务启动后连接Zookeeper然后创建节点
		b.服务删除节点时->服务因某种异常断开与Zookeeper连接,此时Zookeeper会自动删除此节点
	其中讲解了Deamon守护线程,即主线程结束后Deamon线程继续运行,不然普通方式创建子线程时,只要子线程不结束则主线程也不结束。
---2018.07.22---
	异常可以释放syncronized锁
	lock和syncronized区别
	1. Lock是个接口
	2. Lock必须手动释放锁而synchronized代码执行完成后就会释放锁
	3. Lock中有中断锁方法,即等待的获取锁的线程可以终止等待去做些别的事情
---2018.07.23---
	常用线程池：
		SingleThread--固定单线程在池子中,好处就是可以保证提交任务的顺序执行
		CachedThreadPool--缓冲线程池,可灵活回收空闲线程
		FixedThreadPool--创建固定线程数的线程池
		ScheduledThreadPool--支持延时或周期性的任务执行
	创建多线程时使用java.lang.Runable和 java.util.concurrent.Callable<V>区别
	1. Callable中V call() throws Exception; 是有返回值(泛型)的,而Runable的run()方法没有返回值
---2018.07.25---
	多线程obj.notify和obj.wait使用的前提是加同一个对象锁synchronized(obj){obj.notify()/obj.wait()}
---2018.08.01---
	netty传输对象序列化时,通过对象流ObjectOutputStream包装字节流ByteArrayOutputStream,从而得到对象序列化之后的字节数组bytes[]
		byte[] bytes = null;
		ByteArrayOutputStream bo = new ByteArrayOutputStream();
		ObjectOutputStream oo = null;
		...
			oo = new ObjectOutputStream(bo);
			oo.writeObject(obj);
			bytes = bo.toByteArray();
		...
	反序列化,同样也是对象流ObjectInputStream包装字节流ByteArrayInputStream
	Object obj = null;
		ByteArrayInputStream bi = new ByteArrayInputStream(bytes);
		ObjectInputStream oi = null;
		try {
			oi = new ObjectInputStream(bi);
			obj = oi.readObject();
			...
	
	netty的客户端注册handler
	@Override
	protected void initChannel(SocketChannel ch)throws Exception {
			// 注册序列化person的handler
			ch.pipeline().addLast(new PersonEncoder());  //执行顺序1
			//注册发送person对象的handler
			ch.pipeline().addLast(new EchoClientHandler());   //执行顺序2
				}
---2018.8.2---
	NIO与传统IO相比优势并不是速度快,而是体现在并发量上。
	传统IO会发生线程阻塞,如下
	while(true){
		//等待网络连接时会阻塞线程
		socket.accept();
		input=socket.getInput();
		output=socket.getOutput();
		//读写过程会发生阻塞
		input.read();
		output.write();
	}
	而NIO是把连接和读写都交给操作系统内核来做,并注册事件,内核操作结束后通知事件
---2018.8.6---
	org.softcits.rpc.customised的服务端看完了,感觉netty的东西还得深看,明天看客户端
---2018.8.7---
	完成自定义rpc框架代码查看,具体参图2个png
---2018.8.8---
	jvm垃圾回收1.标记算法(会产生内存碎片)2.复制算法(4/5->1/5,因为eden中的对象大多朝生夕死)
	垃圾收集器
	1.Serial收集器-Stop the world.
	2.Parallel收集器-gc和用户线程同时执行
	3.cms收集器-并发标记低停顿(标记(stop-the-world)->同时和用户线程运行从而并发清理)
---2018.8.9---
	jvm堆溢出分析方法
	生成dump:jvm运行时使用-XXHeapDumpOnOutOfMemoryError -XX:HeapDumpPath=c:/heap.dump
	使用MemoryAnalyzer打开dump文件,可以看到生成了多少个对象,对象的类型,以及占用堆内存
	听了今天的课坚定了走大数据的路线啊
---2018.8.13---
	离线推荐系统: logfile->flume->hdfs->mapreduce(数据预处理)->hive->mysql
	实时推荐系统: logfile->kafka->storm/sparkStreaming
---2018.8.15---
	hadoop包括
		hdfs:控制台http://192.168.4.132:50070
			namenode:hadoop-deamon.sh start namenode
			datanode:hadoop-deamon.sh start datanode
		yarn:控制台http://192.168.4.132:8088
			reourcemanager:yarn-daemon.sh start resourcemanager
			nodemanager:yarn-daemon.sh start nodemanager
	hadoop指令:
		hadoop fs -ls /
		hadoop fs -put trail01.txt /
		hadoop fs -get /trail01.txt
		hadoop fs -cat /trail01.txt
---2018.8.16---
	hdfs设置副本数量: hadoop fs -setrep xx /a.txt
	其中副本数量只是元数据记载,具体能保存多少份要看有多少datanode物理机器
---2018.8.22---
NameNode Metadata -> data description,maintain the file tree struture
NameNode(FileName,replicas,block-ids,block_id1:host,block_id2:host,...)
fsimage/edits/fstime
secondary name node只是负责fsimage和edits合并,并不提供name node的容灾服务
	